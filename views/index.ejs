<!DOCTYPE html>
<html>

<head>
    <title>Data Table</title>
    <style>
        nav {
            /* Add styles for your navigation bar */
            display: flex;
            align-items: center;
            justify-content: flex-end;
            /* Align content to the right side */
            padding-right: 20%;
            /* Add 20% distance from the center towards the right */
        }

        #app {
            /* Add styles for the div inside the navigation bar */
            /* Adjust the styles as needed */
        }


        .base-timer {
            position: relative;
            width: 70px;
            height: 70px;
        }

        .base-timer__svg {
            transform: scaleX(-1);
        }

        .base-timer__circle {
            fill: none;
            stroke: none;
        }

        .base-timer__path-elapsed {
            stroke-width: 7px;
            stroke: grey;
        }

        .base-timer__path-remaining {
            stroke-width: 7px;
            stroke-linecap: round;
            transform: rotate(90deg);
            transform-origin: center;
            transition: 1s linear all;
            fill-rule: nonzero;
            stroke: currentColor;
        }

        .base-timer__path-remaining.green {
            color: rgb(65, 184, 131);
        }

        .base-timer__path-remaining.orange {
            color: orange;
        }

        .base-timer__path-remaining.red {
            color: red;
        }

        .base-timer__label {
            position: absolute;
            width: 70px;
            height: 70px;
            top: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 26px;
        }
    </style>
</head>

<body>
    <nav>
        <button id="nav-button">Button</button>
        <div id="app"></div>
        <!-- Add other navigation bar content here -->
    </nav>

    <h1>Data Table</h1>
    <table>
        <thead>
            <tr>
                <th>Rank</th>
                <th>Name</th>
                <th>Last</th>
                <th>Buy</th>
                <th>Sell</th>
                <th>Volume</th>
                <th>Base Unit</th>
                <th>Time</th>
            </tr>
        </thead>
        <tbody>
            <% data.forEach(function(item,index) { %>
                <tr>
                    <td>
                        <%= index + 1 %>
                    </td>
                    <td>
                        <%= item.name %>
                    </td>
                    <td>
                        <%= item.last %>
                    </td>
                    <td>
                        <%= item.buy %>
                    </td>
                    <td>
                        <%= item.sell %>
                    </td>
                    <td>
                        <%= item.volume %>
                    </td>
                    <td>
                        <%= item.base_unit %>
                    </td>
                    <td>
                        <%= item.time %>
                    </td>
                </tr>
                <% }); %>
        </tbody>
    </table>



    <script>
        // Credit: Mateusz Rybczonec

        const FULL_DASH_ARRAY = 283;
        const WARNING_THRESHOLD = 10;
        const ALERT_THRESHOLD = 5;

        const COLOR_CODES = {
            info: {
                color: "green"
            },
            warning: {
                color: "orange",
                threshold: WARNING_THRESHOLD
            },
            alert: {
                color: "red",
                threshold: ALERT_THRESHOLD
            }
        };

        const TIME_LIMIT = 20;
        let timePassed = 0;
        let timeLeft = TIME_LIMIT;
        let timerInterval = null;
        let remainingPathColor = COLOR_CODES.info.color;

        document.getElementById("app").innerHTML = `
          <div class="base-timer">
            <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
              <g class="base-timer__circle">
                <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
                <path
                  id="base-timer-path-remaining"
                  stroke-dasharray="283"
                  class="base-timer__path-remaining ${remainingPathColor}"
                  d="
                    M 50, 50
                    m -45, 0
                    a 45,45 0 1,0 90,0
                    a 45,45 0 1,0 -90,0
                  "
                ></path>
              </g>
            </svg>
            <span id="base-timer-label" class="base-timer__label">${formatTime(
            timeLeft
        )}</span>
          </div>
        `;

        startTimer();

        function onTimesUp() {
            clearInterval(timerInterval);
            if (timeLeft === 0) {
                pp();
            }
        }

        function startTimer() {
            timerInterval = setInterval(() => {
                timePassed = timePassed += 1;
                timeLeft = TIME_LIMIT - timePassed;
                document.getElementById("base-timer-label").innerHTML = formatTime(timeLeft);
                setCircleDasharray();
                setRemainingPathColor(timeLeft);

                if (timeLeft === 0) {
                    onTimesUp();
                }
            }, 1000);
        }

        function formatTime(time) {
            const minutes = Math.floor(time / 60);
            let seconds = time % 60;

            if (seconds < 10) {
                seconds = `0${seconds}`;
            }

            return `${minutes}:${seconds}`;
        }

        function setRemainingPathColor(timeLeft) {
            const { alert, warning, info } = COLOR_CODES;
            if (timeLeft <= alert.threshold) {
                document
                    .getElementById("base-timer-path-remaining")
                    .classList.remove(warning.color);
                document
                    .getElementById("base-timer-path-remaining")
                    .classList.add(alert.color);
            } else if (timeLeft <= warning.threshold) {
                document
                    .getElementById("base-timer-path-remaining")
                    .classList.remove(info.color);
                document
                    .getElementById("base-timer-path-remaining")
                    .classList.add(warning.color);
            }
        }

        function calculateTimeFraction() {
            const rawTimeFraction = timeLeft / TIME_LIMIT;
            return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);
        }

        function setCircleDasharray() {
            const circleDasharray = `${(calculateTimeFraction() * FULL_DASH_ARRAY).toFixed(0)} 283`;
            document
                .getElementById("base-timer-path-remaining")
                .setAttribute("stroke-dasharray", circleDasharray);
        }

        function pp() {
            // Run AJAX request to retrieve data and update table values
            const xhr = new XMLHttpRequest();
            xhr.open("GET", "/", true);
            xhr.onreadystatechange = function () {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    if (xhr.status === 200) {
                        const response = JSON.parse(xhr.responseText);
                        // Update table values using the response data
                        updateTable(response);
                    } else {
                        console.error("Failed to retrieve data:", xhr.status);
                    }
                }
            };
            xhr.send();
        }

        function updateTable(data) {
            // Update the table values with the new data
            const tableBody = document.getElementById("table-body");
            tableBody.innerHTML = ""; // Clear existing table rows

            data.forEach((item) => {
                const row = document.createElement("tr");
                const column1 = document.createElement("td");
                const column2 = document.createElement("td");
                const column3 = document.createElement("td");

                column1.textContent = item.column1;
                column2.textContent = item.column2;
                column3.textContent = item.column3;

                row.appendChild(column1);
                row.appendChild(column2);
                row.appendChild(column3);

                tableBody.appendChild(row);
            });
        }

    </script>
</body>

</html>